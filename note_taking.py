# -*- coding: utf-8 -*-
"""note_taking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16DfNICmbDATx0H_MQbyNw_MN1nPiMPf-
"""

from google.colab import drive
drive.mount('/content/drive')

from flask import Flask, request, jsonify
from transformers import pipeline
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api._errors import TranscriptsDisabled
import re
from pyngrok import ngrok
from tqdm import tqdm

app = Flask(__name__)
ngrok.set_auth_token('2W7E1XZd8X3bQnyuJWdJyfl883S_4xvBLxdHW8zHfL7K9M37H')
url = ngrok.connect(5000).public_url


# ngrok.set_auth_token("2UhLRV3eiGI4oP9nNV72tpAvWgJ_5tiy446h6FMSWedZb4zt4")
# public_url = ngrok.connect(5000)

summarizer = pipeline("summarization", model="/content/drive/MyDrive/ColabNotebooks/summarizer")

def processing(result, value):
    def clean_text(text):
        # Remove extra spaces and spaces before punctuation
        cleaned_text = re.sub(r'\s+', ' ', text)
        cleaned_text = re.sub(r'\s([.,;!?])', r'\1', cleaned_text)
        return cleaned_text.strip()

    def remove_bracketed_words(text):
        # Remove words enclosed in square brackets including the brackets
        cleaned_text = re.sub(r'\[.*?\]', '', text)
        return cleaned_text

    def summarize(text):
        num_iters = int(len(text) / 1000)
        summarized_text1 = []

        for i in tqdm(range(num_iters + 1), desc="Summarizing"):
            start = i * 1000
            end = (i + 1) * 1000
            if i == num_iters:
                out = summarizer(text[start:])
            else:
                out = summarizer(text[start:end])  # Implement your summarization logic here
            out = out[0]['summary_text']
            cleaned_out = remove_bracketed_words(out)  # Remove words and brackets
            cleaned_out = clean_text(cleaned_out)  # Clean extra spaces and irregularities
            summarized_text1.append(cleaned_out)

        # Convert the list of cleaned summarized texts into a single string
        combined_cleaned_summarized_text = ' '.join(summarized_text1)

        return combined_cleaned_summarized_text

    for i in range(value):
        summarized_text = summarize(result)
        result = summarized_text

    # Adding bullet points after specific ends of paragraphs
    bullet_pointed_text = re.sub(r'([.?!"\'\n])\s+', r'\1\n• ', summarized_text)
    bullet_pointed_text = bullet_pointed_text.replace('• ', '\n• ')

    return bullet_pointed_text


def get_summary_from_link(link, value):
    try:
        if '?v=' in link:
            video_id = link.split("=")[1]
        else:
            video_id = link.replace("https://youtu.be/", "")
            video_id = video_id.replace("?feature=shared","")

        transcript = YouTubeTranscriptApi.get_transcript(video_id)
        result = ""
        for i in transcript:
            result += ' ' + i['text']

        cleaned_summary = processing(result, value)

        return cleaned_summary

    except TranscriptsDisabled as e:
        return "Transcripts are disabled for this video."

    except Exception as e:
        return "An error occurred: " + str(e)

@app.route('/')
def home():
    return "home"


@app.route('/summarize', methods=['POST'])
def summarize_route():  # Rename the route handler to avoid conflict
    try:
        value = int(request.form.get('value'))
        type = str(request.form.get('type'))

        if type == 'summary':
            result = str(request.form.get('text'))
            result = re.sub(r'• ', '', result)
            result = re.sub(r'\n\n+', '', result)

            final_summary = "• " +processing(result, value)
        else:
            link = str(request.form.get('link'))
            final_summary = "• " + get_summary_from_link(link, value)

        return final_summary

    except Exception as e:
        return str(e)

print("To access the Post click here", url)

if __name__ == '__main__':
    app.run(port = 5000)

!pip install transformers
!pip install youtube_transcript_api
!pip install pyngrok

from flask import Flask, request, jsonify
from transformers import pipeline
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api._errors import TranscriptsDisabled
import re
from pyngrok import ngrok
from tqdm import tqdm

app = Flask(__name__)
ngrok.set_auth_token('2W7E1XZd8X3bQnyuJWdJyfl883S_4xvBLxdHW8zHfL7K9M37H')
url = ngrok.connect(5000).public_url

summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

def processing(result, value):
    def clean_text(text):

        cleaned_text = re.sub(r'\s+', ' ', text)
        cleaned_text = re.sub(r'\s([.,;!?])', r'\1', cleaned_text)
        return cleaned_text.strip()

    def remove_bracketed_words(text):

        cleaned_text = re.sub(r'\[.*?\]', '', text)
        return cleaned_text

    def summarize(text):
      num_iters = int(len(text) / 1000)
      summarized_text1 = []

      for i in tqdm(range(num_iters + 1), desc="Summarizing"):
        start = i * 1000
        end = (i + 1) * 1000
        if i == num_iters:
            out_list = summarizer(text[start:], max_length=len(text)-start, min_length=30, do_sample=False)
        else:
            out_list = summarizer(text[start:end], max_length=130, min_length=30, do_sample=False)

        out_list = out_list[0]['summary_text']
        cleaned_out = remove_bracketed_words(out_list)
        cleaned_out = clean_text(cleaned_out)
        summarized_text1.append(cleaned_out)

      combined_cleaned_summarized_text = ' '.join(summarized_text1)
      return combined_cleaned_summarized_text


    summarized_text = summarize(result)

    bullet_pointed_text = re.sub(r'([.?!"\'\n])\s+', r'\1\n• ', summarized_text)
    bullet_pointed_text = bullet_pointed_text.replace('• ', '\n• ')

    return bullet_pointed_text


def get_summary_from_link(link, value):
    try:
        if '?v=' in link:
            video_id = link.split("=")[1]
        else:
            video_id = link.replace("https://youtu.be/", "")
            video_id = video_id.replace("?feature=shared","")

        transcript = YouTubeTranscriptApi.get_transcript(video_id)
        result = ""
        for i in transcript:
            result += ' ' + i['text']

        cleaned_summary = processing(result, 1)

        return cleaned_summary

    except TranscriptsDisabled as e:
        return "Transcripts are disabled for this video."

    except Exception as e:
        return "An error occurred: " + str(e)

@app.route('/')
def home():
    return "home"


@app.route('/summarize', methods=['POST'])
def summarize_route():
    try:
        value = int(request.form.get('value'))
        type = str(request.form.get('type'))

        if type == 'summary':
            result = str(request.form.get('text'))
            result = re.sub(r'• ', '', result)
            result = re.sub(r'\n\n+', '', result)

            final_summary = "• " +processing(result, value)
        else:
            link = str(request.form.get('link'))
            final_summary = "• " + get_summary_from_link(link, value)

        return final_summary

    except Exception as e:
        return str(e)

print("To access the Post click here", url)

if __name__ == '__main__':
    app.run(port = 5000)

!rm /root/.ngrok2/ngrok.yml

!pip install -q transformers einops accelerate langchain bitsandbytes

from transformers import AutoTokenizer, pipeline
from langchain import HuggingFacePipeline
import torch

model = "tiiuae/falcon-7b-instruct"

tokenizer = AutoTokenizer.from_pretrained(model)

pipeline = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    torch_dtype=torch.bfloat16,
    trust_remote_code=True,
    device_map="auto",
    max_length=200,
    do_sample=True,
    top_k=10,
    num_return_sequences=1,
    eos_token_id=tokenizer.eos_token_id
)

!pip install accelerate==0.4.0

